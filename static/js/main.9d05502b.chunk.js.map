{"version":3,"sources":["img/dicut.png","logo.svg","component/Navbar.js","component/Banner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","styled","div","HeaderNav","MenuBar","ul","MenuItem","li","NavBar","button","Container","ColumnsBanner","Content","BlockQuote","ButtonFrame","Button","Banner","src","ProfilePic","width","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,uoCCG3C,IAAMC,EAAOC,IAAOC,IAAV,KAIJC,EAAYF,IAAOC,IAAV,KAWTE,EAAUH,IAAOI,GAAV,KAEPC,EAAWL,IAAOM,GAAV,KA8CCC,GA7BGP,IAAOQ,OAAV,KAaA,WACb,OACE,kBAACN,EAAD,KACE,kBAACH,EAAD,aACA,6BACE,kBAACI,EAAD,KACE,kBAACE,EAAD,cACA,kBAACA,EAAD,gBACA,kBAACA,EAAD,iBACA,kBAACA,EAAD,qB,4qDCvDV,IAAMI,EAAYT,IAAOC,IAAV,KAWTS,EAAgBV,IAAOC,IAAV,KAUbU,EAAUX,IAAOC,IAAV,KAmBPW,EAAaZ,IAAOC,IAAV,KAgCVY,EAAcb,IAAOC,IAAV,KAQXa,EAASd,IAAOQ,OAAV,KAgDGO,EAhCA,WACb,OACE,6BACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,yBAAKM,IAAKC,IAAYC,MAAM,SAI9B,kBAACR,EAAD,KACA,kBAACC,EAAD,KAEE,kDACA,qDAGA,+CAGE,kBAACC,EAAD,4FAEF,kBAACC,EAAD,KACA,kBAACC,EAAD,aACE,kBAACA,EAAD,sBC3GGK,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d05502b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dicut.702af810.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nconst Logo = styled.div`\n  margin-right: auto;\n`;\n\nconst HeaderNav = styled.div`\n  display: flex;\n  font-size: 1em;\n  font-weight: 50;\n  color: white;\n  background: black;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 20px 7%;\n`;\n\nconst MenuBar = styled.ul``;\n\nconst MenuItem = styled.li`\n   {\n    list-style: none;\n    color: \"palevioletred\";\n    display: inline-block;\n    padding: 9px 20px;\n    align-items: center;\n    transition: all 0.3s ease 0s;\n    cursor: pointer;\n    letter-spacing: 2px;\n\n    :hover {\n      color: #696969;\n    }\n  }\n`;\n\nconst ButtonNav = styled.button`\n  border-radius: 50px;\n  padding: 9px 25px;\n  border: none;\n  background-color: #1890ff;\n  cursor: pointer;\n  transition: all 0.3s ease 0s;\n  color: white;\n  :hover {\n    background-color: #1c83e2;\n  }\n`;\n\nconst NavBar = () => {\n  return (\n    <HeaderNav>\n      <Logo>Home</Logo>\n      <nav>\n        <MenuBar>\n          <MenuItem>About</MenuItem>\n          <MenuItem>Project</MenuItem>\n          <MenuItem>Activity</MenuItem>\n          <MenuItem>Contact</MenuItem>\n        </MenuBar>\n      </nav>\n    </HeaderNav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ProfilePic from \"../img/dicut.png\";\n\nconst Container = styled.div`\n{\n    padding: 3em;\n    display: grid;\n    grid-template-columns: 40% 60%;\n    grid-template-rows: auto;\n    background-color: white;\n\n\n}\n`;\nconst ColumnsBanner = styled.div`\n   {\n\n    justify-content: start;\n    // border: 1px solid black;\n    word-wrap: break-word;  \n\n  }\n`;\n\nconst Content = styled.div`\n{\n    \n    text-align: left;\n    \n    h1{\n        font-size: 3.5em;\n    }\n    \n    h2{\n        margin-top: -20px;\n        font-size: 3em;\n    }\n    p{\n        font-size: 1.5em;\n    }\n}\n`\n\nconst BlockQuote = styled.div`\n{\n    \n\tposition: relative;\n\tfont-weight: 900;\n\tcolor: #2560ff;\n    padding: 1em;\n    margin: 0.2em;\n    max-width: 33em;\n\tfont-size: 24px;\n\t&:before {\n\t\tcontent: \"â€œ\";\n\t\tfont-family: serif;\n\t\tposition: absolute;\n\t\tright: 100%;\n\t\tfont-size: 4em;\n\t\tline-height: 0px;\n\t\ttop: 50px;\n\t\tcolor: #78e08f;\n\t}\n\t&:after {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\ttop: 100%;\n\t\twidth: 5em;\n\t\theight: 0.2em;\n\t\tbackground: #e56d39;\n\t\tleft: 1em;\n\t}\n}\n`\nconst ButtonFrame = styled.div`\n{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n`\n\nconst Button = styled.button`\n{\n    color: palevioletred;\n    font-size: 1em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid palevioletred;\n    border-radius: 3px;\n    width: 10em;\n    cursor: pointer;\n\n    \n}\n`\n\n\nconst Banner = () => {\n  return (\n    <div>\n      <Container>\n        <ColumnsBanner>\n          <img src={ProfilePic} width=\"70%\"></img>\n\n        </ColumnsBanner>\n    \n        <ColumnsBanner>\n        <Content>\n\n          <p>Welcome, My name is</p>\n          <h1> \n              THONG-NGURN YAMPRADIT\n          </h1>\n          <h2>\n              - WEB DEVELOPER\n          </h2>\n            <BlockQuote>I'm a student who interest in web development especially in Front-end with ReactJS.</BlockQuote>\n          \n          <ButtonFrame>\n          <Button>view</Button>\n            <Button>contact</Button> \n          </ButtonFrame>\n         \n          </Content>\n        </ColumnsBanner>\n    </Container>\n    </div>\n  );\n};\nexport default Banner;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './css/App.css'\nimport NavBar from './component/Navbar';\nimport Banner from './component/Banner';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <Banner/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}